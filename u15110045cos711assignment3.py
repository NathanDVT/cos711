{"cells":[{"metadata":{},"cell_type":"markdown","source":"Hai Everyone. This is a simple model for classification. \n\n**STEPS**\n\n1]  Importing required libraries\n\n2] Importing the data\n\n3] Data pre-processing\n\n4] creating a model\n\n5] Fitting the model\n"},{"metadata":{},"cell_type":"markdown","source":"**Step 1 **: Importing the required libraries."},{"metadata":{"_cell_guid":"170f0fb3-b5da-4a9b-870a-0365b4bc8f30","_uuid":"a31348a5eba01332c755b5d244ff9d8a5f1d3ee7","scrolled":true,"trusted":true},"cell_type":"code","source":"# This Python 3 environment comes with many helpful anal,ytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Convolution2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom keras import backend as K\nfrom tqdm import tqdm\nimport tensorflow as tf\n\nimport math\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"../input\"]).decode(\"utf8\"))\n\n\n# Any results you write to the current directory are saved as output.","execution_count":16,"outputs":[{"output_type":"stream","text":"fashionmnist\nziradata\n\n","name":"stdout"}]},{"metadata":{"_cell_guid":"98fd2558-1557-4d4b-a849-a65feaa821fa","_uuid":"f9a7e29aaaa6189886df0b3ac01cdaa1509c6d25"},"cell_type":"markdown","source":"**Step 2** :As mentioned above the input file present in  \"../input/\". We import it using pandas"},{"metadata":{"trusted":true},"cell_type":"code","source":"train=pd.read_csv(\"../input/ziradata/ReducedTrain.csv\")\ntest= pd.read_csv(\"../input/ziradata/ReducedTest.csv\")\ntrain.head()\ndef replace_nan(x):\n    if x==\" \":\n        return np.nan\n    else :\n        return float(x)\nfeatures=[\"temp\",\"precip\",\"rel_humidity\",\"wind_dir\",\"wind_spd\",\"atmos_press\"]\nfor feature in features : \n    train[feature]=train[feature].apply(lambda x: [ replace_nan(X) for X in x.replace(\"nan\",\" \").split(\",\")])\n    test[feature]=test[feature].apply(lambda x: [ replace_nan(X)  for X in x.replace(\"nan\",\" \").split(\",\")]) \ndef aggregate_features(x,col_name):\n    x[\"max_\"+col_name]=x[col_name].apply(np.max)\n    x[\"min_\"+col_name]=x[col_name].apply(np.min)\n    x[\"mean_\"+col_name]=x[col_name].apply(np.mean)\n    x[\"std_\"+col_name]=x[col_name].apply(np.std)\n    x[\"var_\"+col_name]=x[col_name].apply(np.var)\n    x[\"median_\"+col_name]=x[col_name].apply(np.median)\n    x[\"ptp_\"+col_name]=x[col_name].apply(np.ptp)\n    return x  \ndef remove_nan_values(x):\n    return [e for e in x if not math.isnan(e)]\ndata = pd.concat([train,test]).reset_index(drop=True)\ndata.columns.tolist()","execution_count":17,"outputs":[{"output_type":"execute_result","execution_count":17,"data":{"text/plain":"['ID',\n 'atmos_press',\n 'location',\n 'precip',\n 'rel_humidity',\n 'target',\n 'temp',\n 'wind_dir',\n 'wind_spd']"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"train.head()","execution_count":18,"outputs":[{"output_type":"execute_result","execution_count":18,"data":{"text/plain":"              ID location                                               temp  \\\n0     ID_train_0        C  [nan, nan, nan, nan, nan, nan, nan, nan, nan, ...   \n1     ID_train_1        D  [22.53333333, 21.71666667, 20.83333333, 20.983...   \n2    ID_train_10        A  [28.975, 27.95, 29.6, 26.425, 22.09166667, 21....   \n3   ID_train_100        A  [22.96666667, 24.26666667, 25.275, 25.625, 25....   \n4  ID_train_1000        A  [21.875, 21.575, 21.525, 21.43333333, 20.50833...   \n\n                                              precip  \\\n0  [nan, nan, nan, nan, nan, nan, nan, nan, nan, ...   \n1  [0.102, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034, 0...   \n2  [0.0, 0.0, 0.0, 0.102, 0.136, 0.0, 0.0, 2.16, ...   \n3  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.77,...   \n4  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...   \n\n                                        rel_humidity  \\\n0  [nan, nan, nan, nan, nan, nan, nan, nan, nan, ...   \n1  [0.744583333, 0.808083333, 0.911166667, 0.9163...   \n2  [0.573333333, 0.597166667, 0.5668333329999999,...   \n3  [0.8430833329999999, 0.79025, 0.7375, 0.728, 0...   \n4  [0.8564166670000001, 0.874916667, 0.879833333,...   \n\n                                            wind_dir  \\\n0  [nan, nan, nan, nan, nan, nan, nan, nan, nan, ...   \n1  [281.6643101, 89.15629262, 81.96853891, 291.01...   \n2  [nan, nan, nan, nan, nan, nan, nan, nan, nan, ...   \n3  [300.0850574, 293.6769595, 294.5174647, 301.92...   \n4  [21.83997432, 17.05405341, 89.26406044, 123.58...   \n\n                                            wind_spd  \\\n0  [nan, nan, nan, nan, nan, nan, nan, nan, nan, ...   \n1  [2.3775, 1.126666667, 0.700833333, 0.341666667...   \n2  [nan, nan, nan, nan, nan, nan, nan, nan, nan, ...   \n3  [1.446666667, 1.1925, 1.324166667, 1.544166666...   \n4  [0.1975, 0.244166667, 0.411666667, 0.56, 0.577...   \n\n                                         atmos_press      target  \n0  [nan, nan, nan, nan, nan, nan, nan, nan, nan, ...   45.126304  \n1  [90.32, 90.3775, 90.44083333, 90.4725, 90.4541...   79.131702  \n2  [88.55166667, 88.46416667, 88.31916667, 88.24,...   32.661304  \n3  [88.615, 88.53083333, 88.4, 88.27166667, 88.20...   53.850238  \n4  [88.55666667, 88.64083333, 88.65833333, 88.647...  177.418750  ","text/html":"<div>\n<style>\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>location</th>\n      <th>temp</th>\n      <th>precip</th>\n      <th>rel_humidity</th>\n      <th>wind_dir</th>\n      <th>wind_spd</th>\n      <th>atmos_press</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_train_0</td>\n      <td>C</td>\n      <td>[nan, nan, nan, nan, nan, nan, nan, nan, nan, ...</td>\n      <td>[nan, nan, nan, nan, nan, nan, nan, nan, nan, ...</td>\n      <td>[nan, nan, nan, nan, nan, nan, nan, nan, nan, ...</td>\n      <td>[nan, nan, nan, nan, nan, nan, nan, nan, nan, ...</td>\n      <td>[nan, nan, nan, nan, nan, nan, nan, nan, nan, ...</td>\n      <td>[nan, nan, nan, nan, nan, nan, nan, nan, nan, ...</td>\n      <td>45.126304</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_train_1</td>\n      <td>D</td>\n      <td>[22.53333333, 21.71666667, 20.83333333, 20.983...</td>\n      <td>[0.102, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034, 0...</td>\n      <td>[0.744583333, 0.808083333, 0.911166667, 0.9163...</td>\n      <td>[281.6643101, 89.15629262, 81.96853891, 291.01...</td>\n      <td>[2.3775, 1.126666667, 0.700833333, 0.341666667...</td>\n      <td>[90.32, 90.3775, 90.44083333, 90.4725, 90.4541...</td>\n      <td>79.131702</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_train_10</td>\n      <td>A</td>\n      <td>[28.975, 27.95, 29.6, 26.425, 22.09166667, 21....</td>\n      <td>[0.0, 0.0, 0.0, 0.102, 0.136, 0.0, 0.0, 2.16, ...</td>\n      <td>[0.573333333, 0.597166667, 0.5668333329999999,...</td>\n      <td>[nan, nan, nan, nan, nan, nan, nan, nan, nan, ...</td>\n      <td>[nan, nan, nan, nan, nan, nan, nan, nan, nan, ...</td>\n      <td>[88.55166667, 88.46416667, 88.31916667, 88.24,...</td>\n      <td>32.661304</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_train_100</td>\n      <td>A</td>\n      <td>[22.96666667, 24.26666667, 25.275, 25.625, 25....</td>\n      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.77,...</td>\n      <td>[0.8430833329999999, 0.79025, 0.7375, 0.728, 0...</td>\n      <td>[300.0850574, 293.6769595, 294.5174647, 301.92...</td>\n      <td>[1.446666667, 1.1925, 1.324166667, 1.544166666...</td>\n      <td>[88.615, 88.53083333, 88.4, 88.27166667, 88.20...</td>\n      <td>53.850238</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_train_1000</td>\n      <td>A</td>\n      <td>[21.875, 21.575, 21.525, 21.43333333, 20.50833...</td>\n      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n      <td>[0.8564166670000001, 0.874916667, 0.879833333,...</td>\n      <td>[21.83997432, 17.05405341, 89.26406044, 123.58...</td>\n      <td>[0.1975, 0.244166667, 0.411666667, 0.56, 0.577...</td>\n      <td>[88.55666667, 88.64083333, 88.65833333, 88.647...</td>\n      <td>177.418750</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"for col_name in tqdm(features):\n    data[col_name]=data[col_name].apply(remove_nan_values)\ndata.head()","execution_count":19,"outputs":[{"output_type":"stream","text":"100%|██████████| 6/6 [00:00<00:00, 33.26it/s]\n","name":"stderr"},{"output_type":"execute_result","execution_count":19,"data":{"text/plain":"              ID                                        atmos_press location  \\\n0     ID_train_0  [87.77727273, 87.6525, 87.61416667, 87.6375, 8...        C   \n1     ID_train_1  [90.32, 90.3775, 90.44083333, 90.4725, 90.4541...        D   \n2    ID_train_10  [88.55166667, 88.46416667, 88.31916667, 88.24,...        A   \n3   ID_train_100  [88.615, 88.53083333, 88.4, 88.27166667, 88.20...        A   \n4  ID_train_1000  [88.55666667, 88.64083333, 88.65833333, 88.647...        A   \n\n                                              precip  \\\n0  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...   \n1  [0.102, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034, 0...   \n2  [0.0, 0.0, 0.0, 0.102, 0.136, 0.0, 0.0, 2.16, ...   \n3  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.77,...   \n4  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...   \n\n                                        rel_humidity      target  \\\n0  [0.5108181820000001, 0.535416667, 0.6145, 0.63...   45.126304   \n1  [0.744583333, 0.808083333, 0.911166667, 0.9163...   79.131702   \n2  [0.573333333, 0.597166667, 0.5668333329999999,...   32.661304   \n3  [0.8430833329999999, 0.79025, 0.7375, 0.728, 0...   53.850238   \n4  [0.8564166670000001, 0.874916667, 0.879833333,...  177.418750   \n\n                                                temp  \\\n0  [26.90909091, 27.20833333, 26.18333333, 24.7, ...   \n1  [22.53333333, 21.71666667, 20.83333333, 20.983...   \n2  [28.975, 27.95, 29.6, 26.425, 22.09166667, 21....   \n3  [22.96666667, 24.26666667, 25.275, 25.625, 25....   \n4  [21.875, 21.575, 21.525, 21.43333333, 20.50833...   \n\n                                            wind_dir  \\\n0  [272.90275160000004, 104.565241, 167.1772247, ...   \n1  [281.6643101, 89.15629262, 81.96853891, 291.01...   \n2  [328.68291380000005, 307.8251459, 319.0177512,...   \n3  [300.0850574, 293.6769595, 294.5174647, 301.92...   \n4  [21.83997432, 17.05405341, 89.26406044, 123.58...   \n\n                                            wind_spd  \n0  [0.800909091, 1.073333333, 1.5175, 1.4625, 0.5...  \n1  [2.3775, 1.126666667, 0.700833333, 0.341666667...  \n2  [1.0325, 1.193333333, 1.275833333, 1.493333333...  \n3  [1.446666667, 1.1925, 1.324166667, 1.544166666...  \n4  [0.1975, 0.244166667, 0.411666667, 0.56, 0.577...  ","text/html":"<div>\n<style>\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>atmos_press</th>\n      <th>location</th>\n      <th>precip</th>\n      <th>rel_humidity</th>\n      <th>target</th>\n      <th>temp</th>\n      <th>wind_dir</th>\n      <th>wind_spd</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ID_train_0</td>\n      <td>[87.77727273, 87.6525, 87.61416667, 87.6375, 8...</td>\n      <td>C</td>\n      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n      <td>[0.5108181820000001, 0.535416667, 0.6145, 0.63...</td>\n      <td>45.126304</td>\n      <td>[26.90909091, 27.20833333, 26.18333333, 24.7, ...</td>\n      <td>[272.90275160000004, 104.565241, 167.1772247, ...</td>\n      <td>[0.800909091, 1.073333333, 1.5175, 1.4625, 0.5...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ID_train_1</td>\n      <td>[90.32, 90.3775, 90.44083333, 90.4725, 90.4541...</td>\n      <td>D</td>\n      <td>[0.102, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034, 0...</td>\n      <td>[0.744583333, 0.808083333, 0.911166667, 0.9163...</td>\n      <td>79.131702</td>\n      <td>[22.53333333, 21.71666667, 20.83333333, 20.983...</td>\n      <td>[281.6643101, 89.15629262, 81.96853891, 291.01...</td>\n      <td>[2.3775, 1.126666667, 0.700833333, 0.341666667...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>ID_train_10</td>\n      <td>[88.55166667, 88.46416667, 88.31916667, 88.24,...</td>\n      <td>A</td>\n      <td>[0.0, 0.0, 0.0, 0.102, 0.136, 0.0, 0.0, 2.16, ...</td>\n      <td>[0.573333333, 0.597166667, 0.5668333329999999,...</td>\n      <td>32.661304</td>\n      <td>[28.975, 27.95, 29.6, 26.425, 22.09166667, 21....</td>\n      <td>[328.68291380000005, 307.8251459, 319.0177512,...</td>\n      <td>[1.0325, 1.193333333, 1.275833333, 1.493333333...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ID_train_100</td>\n      <td>[88.615, 88.53083333, 88.4, 88.27166667, 88.20...</td>\n      <td>A</td>\n      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.77,...</td>\n      <td>[0.8430833329999999, 0.79025, 0.7375, 0.728, 0...</td>\n      <td>53.850238</td>\n      <td>[22.96666667, 24.26666667, 25.275, 25.625, 25....</td>\n      <td>[300.0850574, 293.6769595, 294.5174647, 301.92...</td>\n      <td>[1.446666667, 1.1925, 1.324166667, 1.544166666...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ID_train_1000</td>\n      <td>[88.55666667, 88.64083333, 88.65833333, 88.647...</td>\n      <td>A</td>\n      <td>[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...</td>\n      <td>[0.8564166670000001, 0.874916667, 0.879833333,...</td>\n      <td>177.418750</td>\n      <td>[21.875, 21.575, 21.525, 21.43333333, 20.50833...</td>\n      <td>[21.83997432, 17.05405341, 89.26406044, 123.58...</td>\n      <td>[0.1975, 0.244166667, 0.411666667, 0.56, 0.577...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{"_cell_guid":"64a5d464-ddfe-4463-be41-f80d08bcf020","_uuid":"b620edee633b53fea2896cda5f42acbb128c00a6","trusted":true},"cell_type":"code","source":"xoxo = 0\nfor x in range(121):\n    # print(data.values)\n    # data[\"location\"+ str(x)] = ord(data[\"location\"]) - 65\n    data[\"newtemp\"+ str(x)] = data.temp.str[x]\n    data[\"newprecip\"+ str(x)] = data.precip.str[x]\n    data[\"newrel_humidity\"+ str(x)] = data.rel_humidity.str[x]\n    data[\"newwind_dir\"+ str(x)] = data.wind_dir.str[x]\n    data[\"windspeed\"+ str(x)] = data.wind_spd.str[x]\n    data[\"atmospherepressure\"+ str(x)] = data.atmos_press.str[x]\ndata = data.drop(['location','ID',\"temp\",\"precip\",\"rel_humidity\",\"wind_dir\",\"wind_spd\",\"atmos_press\"], axis=1)\n\ntrain=data[data.target.notnull()].reset_index(drop=True)\ntest=data[data.target.isnull()].reset_index(drop=True)\n# Read training and test data files\n\n\n\n","execution_count":20,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"**Step3**:\nThis is important step becaues the keras function accepts the inputs as images.\nBut here we are using CSV file which is a array. So at first we have to convert these into image(All images are the 3-D matrix of pixels).\nSo now we re-shape the matrix into a 3-D matrix.we separate the X(input) and Y(output) from Data\n\nWe also re-scale the data in the range 0-1 because it will be faster to process. so we divide all the values by 255(The max value in the matrix(pixel) is 255)\n\n\n"},{"metadata":{"trusted":true},"cell_type":"code","source":"train.shape","execution_count":21,"outputs":[{"output_type":"execute_result","execution_count":21,"data":{"text/plain":"(499, 727)"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"test.head()","execution_count":22,"outputs":[{"output_type":"execute_result","execution_count":22,"data":{"text/plain":"   target   newtemp0  newprecip0  newrel_humidity0  newwind_dir0  windspeed0  \\\n0     NaN  23.966667         0.0          0.689833    290.135238    0.633333   \n1     NaN  18.991667         0.0          0.999750    295.235054    0.640833   \n2     NaN  25.116667         0.0          0.760167     77.061611    2.013333   \n3     NaN  18.716667         0.0          0.951417    310.750906    0.745000   \n4     NaN  17.633333         0.0          0.900000    334.605407    0.620833   \n\n   atmospherepressure0   newtemp1  newprecip1  newrel_humidity1  \\\n0            87.643333  22.883333         0.0          0.722333   \n1            87.892500  19.708333         0.0          0.997250   \n2            90.340000  25.083333         0.0          0.733583   \n3            87.988333  20.608333         0.0          0.925750   \n4            90.515000  18.058333         0.0          0.898333   \n\n           ...            newrel_humidity119  newwind_dir119  windspeed119  \\\n0          ...                      0.725250      167.412340      1.289167   \n1          ...                      0.868917      174.138794      0.665833   \n2          ...                      0.892833       99.502531      2.285833   \n3          ...                      0.897583      329.644351      0.705833   \n4          ...                      0.850000       12.645287      0.373333   \n\n   atmospherepressure119  newtemp120  newprecip120  newrel_humidity120  \\\n0              87.580000   22.766667         0.000                 NaN   \n1              87.920000   20.025000         0.000            0.886083   \n2              90.409167   20.608333         1.327            0.910167   \n3              87.844167   21.483333         0.000            0.861333   \n4              90.561667   19.833333         0.000            0.851667   \n\n   newwind_dir120  windspeed120  atmospherepressure120  \n0      163.667416      0.774167              87.625833  \n1      111.558812      0.311667              87.998333  \n2       68.393016      1.395000              90.464167  \n3      330.678241      1.026667              87.894167  \n4       28.090116      0.325000              90.584167  \n\n[5 rows x 727 columns]","text/html":"<div>\n<style>\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>target</th>\n      <th>newtemp0</th>\n      <th>newprecip0</th>\n      <th>newrel_humidity0</th>\n      <th>newwind_dir0</th>\n      <th>windspeed0</th>\n      <th>atmospherepressure0</th>\n      <th>newtemp1</th>\n      <th>newprecip1</th>\n      <th>newrel_humidity1</th>\n      <th>...</th>\n      <th>newrel_humidity119</th>\n      <th>newwind_dir119</th>\n      <th>windspeed119</th>\n      <th>atmospherepressure119</th>\n      <th>newtemp120</th>\n      <th>newprecip120</th>\n      <th>newrel_humidity120</th>\n      <th>newwind_dir120</th>\n      <th>windspeed120</th>\n      <th>atmospherepressure120</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>23.966667</td>\n      <td>0.0</td>\n      <td>0.689833</td>\n      <td>290.135238</td>\n      <td>0.633333</td>\n      <td>87.643333</td>\n      <td>22.883333</td>\n      <td>0.0</td>\n      <td>0.722333</td>\n      <td>...</td>\n      <td>0.725250</td>\n      <td>167.412340</td>\n      <td>1.289167</td>\n      <td>87.580000</td>\n      <td>22.766667</td>\n      <td>0.000</td>\n      <td>NaN</td>\n      <td>163.667416</td>\n      <td>0.774167</td>\n      <td>87.625833</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>18.991667</td>\n      <td>0.0</td>\n      <td>0.999750</td>\n      <td>295.235054</td>\n      <td>0.640833</td>\n      <td>87.892500</td>\n      <td>19.708333</td>\n      <td>0.0</td>\n      <td>0.997250</td>\n      <td>...</td>\n      <td>0.868917</td>\n      <td>174.138794</td>\n      <td>0.665833</td>\n      <td>87.920000</td>\n      <td>20.025000</td>\n      <td>0.000</td>\n      <td>0.886083</td>\n      <td>111.558812</td>\n      <td>0.311667</td>\n      <td>87.998333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>25.116667</td>\n      <td>0.0</td>\n      <td>0.760167</td>\n      <td>77.061611</td>\n      <td>2.013333</td>\n      <td>90.340000</td>\n      <td>25.083333</td>\n      <td>0.0</td>\n      <td>0.733583</td>\n      <td>...</td>\n      <td>0.892833</td>\n      <td>99.502531</td>\n      <td>2.285833</td>\n      <td>90.409167</td>\n      <td>20.608333</td>\n      <td>1.327</td>\n      <td>0.910167</td>\n      <td>68.393016</td>\n      <td>1.395000</td>\n      <td>90.464167</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>18.716667</td>\n      <td>0.0</td>\n      <td>0.951417</td>\n      <td>310.750906</td>\n      <td>0.745000</td>\n      <td>87.988333</td>\n      <td>20.608333</td>\n      <td>0.0</td>\n      <td>0.925750</td>\n      <td>...</td>\n      <td>0.897583</td>\n      <td>329.644351</td>\n      <td>0.705833</td>\n      <td>87.844167</td>\n      <td>21.483333</td>\n      <td>0.000</td>\n      <td>0.861333</td>\n      <td>330.678241</td>\n      <td>1.026667</td>\n      <td>87.894167</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>17.633333</td>\n      <td>0.0</td>\n      <td>0.900000</td>\n      <td>334.605407</td>\n      <td>0.620833</td>\n      <td>90.515000</td>\n      <td>18.058333</td>\n      <td>0.0</td>\n      <td>0.898333</td>\n      <td>...</td>\n      <td>0.850000</td>\n      <td>12.645287</td>\n      <td>0.373333</td>\n      <td>90.561667</td>\n      <td>19.833333</td>\n      <td>0.000</td>\n      <td>0.851667</td>\n      <td>28.090116</td>\n      <td>0.325000</td>\n      <td>90.584167</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 727 columns</p>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# Reshape and normalize training data\n\ntrainX = train.values[:, 1:].reshape(train.shape[0],1,121, 6).astype( 'float32' )\nX_train = trainX / 100.0\n\ny_train = train.values[:,0]\n\n\n# Reshape and normalize test data\ntestX = test.values[:,1:].reshape(test.shape[0],1, 121, 6).astype( 'float32' )\nX_test = testX / 100.0\n\ny_test = test.values[:,0]\ntrainX.shape","execution_count":23,"outputs":[{"output_type":"execute_result","execution_count":23,"data":{"text/plain":"(499, 1, 121, 6)"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"y_test","execution_count":24,"outputs":[{"output_type":"execute_result","execution_count":24,"data":{"text/plain":"array([ nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,  nan,\n        nan,  nan,  nan,  nan])"},"metadata":{}}]},{"metadata":{"_cell_guid":"80cb894d-76c4-4494-a4ac-5e3875852ab0","_uuid":"ad7053bca185de080b340a000d753b8c9fade0ff"},"cell_type":"markdown","source":"The model always gives a matrix of probability as output. The max value in that will be the output label. so the next process of data pre-processing is  to encode the output.\nAs I said above the output will be in a matrix of 10 values. so we will define 10 neurons in the output layer.\nBut our csv file contains single values. so we enode the values.\nExample: In the classification of cat(0), dog(1) and monkey(2).The output of the model will look like this [ 0.23 , 0.01 , 0.91 ].\nBut in csv file it will be a single digit i.e 2.\nso we encode  2 as [ 0 , 0 , 1], 1 as [ 0 , 1 , 0] and 0 as [ 1 , 0 , 0 ].  \n\nThis is done by LabelBinarizer() function.\n"},{"metadata":{"_cell_guid":"04bd1d50-0dee-409d-938e-678bcfb5a944","_uuid":"ba10ccfb03cf8b78ad5b0672cb1cba91d3afb8f1","scrolled":true,"trusted":true},"cell_type":"code","source":"from sklearn import preprocessing\nlb = preprocessing.LabelBinarizer()\n# y_train = lb.fit_transform(y_train)\n# y_test = lb.fit_transform(y_test)\nX_train.shape\n\n","execution_count":25,"outputs":[{"output_type":"execute_result","execution_count":25,"data":{"text/plain":"(499, 1, 121, 6)"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"X_train","execution_count":26,"outputs":[{"output_type":"execute_result","execution_count":26,"data":{"text/plain":"array([[[[  2.69090891e-01,   0.00000000e+00,   5.10818185e-03,\n            2.72902751e+00,   8.00909102e-03,   8.77772748e-01],\n         [  2.72083342e-01,   0.00000000e+00,   5.35416650e-03,\n            1.04565239e+00,   1.07333334e-02,   8.76524985e-01],\n         [  2.61833310e-01,   0.00000000e+00,   6.14499999e-03,\n            1.67177236e+00,   1.51750008e-02,   8.76141667e-01],\n         ..., \n         [             nan,              nan,              nan,\n                       nan,              nan,              nan],\n         [             nan,              nan,              nan,\n                       nan,              nan,              nan],\n         [             nan,              nan,              nan,\n                       nan,              nan,              nan]]],\n\n\n       [[[  2.25333333e-01,   1.01999997e-03,   7.44583318e-03,\n            2.81664300e+00,   2.37750001e-02,   9.03199971e-01],\n         [  2.17166677e-01,   0.00000000e+00,   8.08083359e-03,\n            8.91562939e-01,   1.12666665e-02,   9.03775036e-01],\n         [  2.08333343e-01,   0.00000000e+00,   9.11166705e-03,\n            8.19685340e-01,   7.00833322e-03,   9.04408336e-01],\n         ..., \n         [  2.69916654e-01,   0.00000000e+00,   6.51000021e-03,\n            2.13937569e+00,   1.36916665e-02,   9.03258383e-01],\n         [  2.60250002e-01,   0.00000000e+00,   6.49249973e-03,\n            7.35287309e-01,   1.47583326e-02,   9.04391646e-01],\n         [  2.14500010e-01,   5.60999988e-03,   7.97333382e-03,\n            2.96967244e+00,   1.01916669e-02,   9.05291677e-01]]],\n\n\n       [[[  2.89750010e-01,   0.00000000e+00,   5.73333306e-03,\n            3.28682923e+00,   1.03250006e-02,   8.85516644e-01],\n         [  2.79500008e-01,   0.00000000e+00,   5.97166643e-03,\n            3.07825136e+00,   1.19333342e-02,   8.84641647e-01],\n         [  2.96000004e-01,   0.00000000e+00,   5.66833327e-03,\n            3.19017768e+00,   1.27583332e-02,   8.83191705e-01],\n         ..., \n         [  2.92416662e-01,   0.00000000e+00,   4.59583336e-03,\n                       nan,              nan,   8.84758294e-01],\n         [  3.00916672e-01,   0.00000000e+00,   4.37916676e-03,\n                       nan,              nan,   8.84158313e-01],\n         [             nan,              nan,              nan,\n                       nan,              nan,              nan]]],\n\n\n       ..., \n       [[[  2.73166686e-01,   0.00000000e+00,   6.32583303e-03,\n            2.32954741e+00,   6.97499979e-03,   9.01641667e-01],\n         [  2.53500015e-01,   0.00000000e+00,   7.02999998e-03,\n            4.32604104e-01,   5.33333374e-03,   9.02791679e-01],\n         [  2.42666662e-01,   0.00000000e+00,   7.36416643e-03,\n            5.47013044e-01,   6.48333319e-03,   9.03633356e-01],\n         ..., \n         [  2.63166666e-01,   0.00000000e+00,   6.95249997e-03,\n                       nan,              nan,   9.02758360e-01],\n         [  2.53833324e-01,   0.00000000e+00,   7.37416698e-03,\n                       nan,              nan,   9.04391646e-01],\n         [  2.41416663e-01,   0.00000000e+00,   7.83083308e-03,\n                       nan,              nan,   9.04908359e-01]]],\n\n\n       [[[  2.30499998e-01,   0.00000000e+00,   6.84250006e-03,\n            2.54086465e-01,   6.00000005e-03,   9.06633317e-01],\n         [  2.29583338e-01,   0.00000000e+00,   6.93416642e-03,\n            3.27521443e-01,   1.19333342e-02,   9.06800032e-01],\n         [  2.14500010e-01,   0.00000000e+00,   7.38916686e-03,\n            2.62131661e-01,   6.39166636e-03,   9.06800032e-01],\n         ..., \n         [  2.44750008e-01,   0.00000000e+00,   6.87333336e-03,\n            2.73966336e+00,   1.21500008e-02,   9.04658377e-01],\n         [  2.38083318e-01,   0.00000000e+00,   6.70666713e-03,\n            2.93580604e+00,   1.15583334e-02,   9.05375004e-01],\n         [  2.21166670e-01,   0.00000000e+00,   7.67166680e-03,\n            1.65447199e+00,   9.27500054e-03,   9.06183302e-01]]],\n\n\n       [[[  1.91499993e-01,   0.00000000e+00,   9.58666671e-03,\n            1.29852724e+00,   3.99166672e-03,   8.79308343e-01],\n         [  1.92000002e-01,   1.70000014e-04,   9.48583335e-03,\n            3.36232972e+00,   1.41916666e-02,   8.79083335e-01],\n         [  1.87749997e-01,   0.00000000e+00,   9.64500010e-03,\n            3.20300603e+00,   1.19583337e-02,   8.78525019e-01],\n         ..., \n         [  2.11583331e-01,   0.00000000e+00,   8.57583340e-03,\n            1.74089205e+00,   5.72500005e-03,   8.79466653e-01],\n         [  2.06249997e-01,   0.00000000e+00,   8.96000024e-03,\n            1.45336330e+00,   2.89166649e-03,   8.79483342e-01],\n         [  2.04249993e-01,   0.00000000e+00,   9.10499971e-03,\n            6.29098490e-02,   2.65833316e-03,   8.79450023e-01]]]], dtype=float32)"},"metadata":{}}]},{"metadata":{"_cell_guid":"0cf07c87-6c6d-4ec4-8d5d-ae22257a1408","_uuid":"4ef20bcc50040ebebc16ca151f00afd23f24709e"},"cell_type":"markdown","source":"**Step 4:**\nNow we build a model.\nThe model has 2 Convolution layer 2 MaxPooling layer and 2 hidden layers.\nThe flatten mainly used to flatten the 3-D array of previous layer into a single layer(Because the Ann model only take 1-D array as input).So the flatten creates the input layer.\nThere are 10 labels so there will be 10 neurons in the output layer.\nThere are 784 columns(Pixels).But we reshaped it to 28*28.\nSo the Convolution layer input_shape will be (1,28,28) .\nDropout() is used to avoid over-fitting.\n"},{"metadata":{"_cell_guid":"a8a37043-21a4-4cc3-9541-eb44b51a7fcf","_uuid":"d8eba0003c9abe716658aa09a9e432474bec94a7","scrolled":true,"trusted":true},"cell_type":"code","source":"model = Sequential()\nK.set_image_dim_ordering('th')\nmodel.add(Convolution2D(30, 3, 3, border_mode= 'valid' , input_shape=( 1, 121, 6),activation= 'relu' ))\nmodel.add(MaxPooling2D(pool_size=(1, 1)))\nmodel.add(Convolution2D(15, 3,3, activation= 'relu' ))\nmodel.add(MaxPooling2D(pool_size=(1, 1)))\nmodel.add(Dropout(0.1))\nmodel.add(Flatten())\nmodel.add(Dense(600, activation= 'sigmoid' ))\nmodel.add(Dense(50, activation= 'sigmoid' ))\n##model.add(Dense(10, activation= 'softmax' ))\nmodel.add(Dense(1, kernel_initializer='normal'))\n  # Compile model\nmodel.compile(loss= 'mean_squared_error' , optimizer= 'adam' , metrics=[ 'accuracy' ])","execution_count":27,"outputs":[{"output_type":"stream","text":"/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:3: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(30, (3, 3), input_shape=(1, 121, 6..., activation=\"relu\", padding=\"valid\")`\n  This is separate from the ipykernel package so we can avoid doing imports until\n/opt/conda/lib/python3.6/site-packages/ipykernel_launcher.py:5: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(15, (3, 3), activation=\"relu\")`\n  \"\"\"\n","name":"stderr"}]},{"metadata":{"_cell_guid":"afab15f4-1174-4ba7-9d7f-cd565a487f0b","_uuid":"9473c31c5375c8e152ddcf85005c1f6d71132eb8"},"cell_type":"markdown","source":"**Step 5 **:\nNow we fit the model with the data.\nYou can increase the accuracy by increasing the number of epochs , Conv layer , Maxpool layers.(In this case).\nBut if you are delaing with images  then  best way is to use Image Data Generator.\nThis uses  real-time data augmentation to produce wide varity of images for a same label.The main advantage of this is the amount of Data is reduced."},{"metadata":{"trusted":true},"cell_type":"code","source":"# y_train","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"2943f123-0fb5-49ce-b0ab-eeffc4e9f4f0","_uuid":"5818621dd52ea1d7ffe5c390acb6672b68afccc6","trusted":true},"cell_type":"code","source":"model.fit(X_train, y_train,\n          epochs=300,\n          batch_size= 70)\nscore = model.evaluate(X_train, y_train, batch_size=70)","execution_count":null,"outputs":[{"output_type":"stream","text":"Epoch 1/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 2/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 3/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 4/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 5/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 6/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 7/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 8/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 9/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 10/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 11/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 12/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 13/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 14/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 15/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 16/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 17/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 18/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 19/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 20/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 21/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 22/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 23/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 24/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 25/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 26/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 27/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 28/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 29/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 30/300\n499/499 [==============================] - 3s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 31/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 32/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 33/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 34/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 35/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 36/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 37/300\n499/499 [==============================] - 2s 4ms/step - loss: nan - acc: 0.0000e+00\nEpoch 38/300\n499/499 [==============================] - 2s 5ms/step - loss: nan - acc: 0.0000e+00\nEpoch 39/300\n 70/499 [===>..........................] - ETA: 1s - loss: nan - acc: 0.0000e+00","name":"stdout"}]},{"metadata":{},"cell_type":"markdown","source":"If you want to see the summary of model then use summary method ."},{"metadata":{"_cell_guid":"f454bf85-8c47-496d-93e6-486493264864","_uuid":"fb13ad26cdf0ccb772c022825a5393a409e1a776","trusted":true},"cell_type":"code","source":"model.summary()\n\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.6.3","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":4}